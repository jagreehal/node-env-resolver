import { describe, it, expect, afterEach } from 'vitest';
import { nodeEnvResolverPlugin } from './plugin';
import { existsSync, readFileSync, unlinkSync, mkdirSync } from 'fs';
import { dirname } from 'path';
import { string, url, port } from 'node-env-resolver';

describe('nodeEnvResolverPlugin - Type Generation', () => {
  const testTypeFile = './test-generated-types.d.ts';

  afterEach(() => {
    // Cleanup test files
    if (existsSync(testTypeFile)) {
      unlinkSync(testTypeFile);
    }
  });

  it('should generate TypeScript definitions for client schema', async () => {
    process.env.VITE_API_URL = 'https://api.example.com';
    process.env.VITE_ENABLE_ANALYTICS = 'false';

    const plugin = nodeEnvResolverPlugin({
      server: {},
      client: {
        VITE_API_URL: url(),
        VITE_ENABLE_ANALYTICS: false,
      }
    }, {
      generateTypes: testTypeFile
    });

    // Simulate config resolution
    if (plugin.config) {
      // @ts-expect-error - Mocking Vite config for testing
      await plugin.config({}, {});
    }

    // Simulate configResolved hook
    if (plugin.configResolved) {
      // @ts-expect-error - Mocking Vite resolved config for testing
      await plugin.configResolved({
        command: 'serve',
        mode: 'development',
        root: process.cwd()
      });
    }

    // Check file was created
    expect(existsSync(testTypeFile)).toBe(true);

    // Check content
    const content = readFileSync(testTypeFile, 'utf-8');
    expect(content).toContain('/// <reference types="vite/client" />');
    expect(content).toContain('Auto-generated by node-env-resolver-vite');
    expect(content).toContain('interface ImportMetaEnv');
    expect(content).toContain('readonly VITE_API_URL: string');
    expect(content).toContain('readonly VITE_ENABLE_ANALYTICS: boolean');
    expect(content).toContain('interface ImportMeta');
  });

  it('should infer correct TypeScript types', async () => {
    process.env.VITE_STRING = 'test';
    process.env.VITE_NUMBER = '123';
    process.env.VITE_BOOLEAN = 'true';
    process.env.VITE_OPTIONAL = 'optional';
    process.env.VITE_URL = 'https://example.com';
    process.env.VITE_ENUM = 'dev';

    const plugin = nodeEnvResolverPlugin({
      server: {},
      client: {
        VITE_STRING: string(),
        VITE_NUMBER: 'number',
        VITE_BOOLEAN: 'boolean',
        VITE_OPTIONAL: string({optional:true}),
        VITE_URL: url(),
        VITE_ENUM: ['dev', 'prod'] as const,
      }
    }, {
      generateTypes: testTypeFile
    });

    if (plugin.config) {
      // @ts-expect-error - Mocking Vite config for testing
      await plugin.config({}, {});
    }

    if (plugin.configResolved) {
      // @ts-expect-error - Mocking Vite resolved config for testing
      await plugin.configResolved({
        command: 'serve',
        mode: 'development',
        root: process.cwd()
      });
    }

    const content = readFileSync(testTypeFile, 'utf-8');
    expect(content).toContain('readonly VITE_STRING: string');
    expect(content).toContain('readonly VITE_NUMBER: number');
    expect(content).toContain('readonly VITE_BOOLEAN: boolean');
    expect(content).toContain('readonly VITE_OPTIONAL: string | undefined');
    expect(content).toContain('readonly VITE_URL: string');
    expect(content).toContain("readonly VITE_ENUM: 'dev' | 'prod'");
  });

  it('should not overwrite custom type files', async () => {
    // Create a custom type file
    const customContent = '// Custom types\ninterface MyCustomInterface {}';
    const dir = dirname(testTypeFile);
    if (!existsSync(dir) && dir !== '.') {
      mkdirSync(dir, { recursive: true });
    }
    
    const fs = await import('fs');
    fs.writeFileSync(testTypeFile, customContent, 'utf-8');

    process.env.VITE_API_URL = 'https://api.example.com';

    const plugin = nodeEnvResolverPlugin({
      server: {},
      client: {
        VITE_API_URL: url(),
      }
    }, {
      generateTypes: testTypeFile
    });

    if (plugin.config) {
      // @ts-expect-error - Mocking Vite config for testing
      await plugin.config({}, {});
    }

    if (plugin.configResolved) {
      // @ts-expect-error - Mocking Vite resolved config for testing
      await plugin.configResolved({
        command: 'serve',
        mode: 'development',
        root: process.cwd()
      });
    }

    // Check file was NOT overwritten
    const content = readFileSync(testTypeFile, 'utf-8');
    expect(content).toBe(customContent);
    expect(content).not.toContain('Auto-generated by node-env-resolver-vite');
  });

  it('should handle port types', async () => {
    process.env.VITE_PORT = '3000';

    const plugin = nodeEnvResolverPlugin({
      server: {},
      client: {
        VITE_PORT: port(),
      }
    }, {
      generateTypes: testTypeFile
    });

    if (plugin.config) {
      // @ts-expect-error - Mocking Vite config for testing
      await plugin.config({}, {});
    }

    if (plugin.configResolved) {
      // @ts-expect-error - Mocking Vite resolved config for testing
      await plugin.configResolved({
        command: 'serve',
        mode: 'development',
        root: process.cwd()
      });
    }

    const content = readFileSync(testTypeFile, 'utf-8');
    expect(content).toContain('readonly VITE_PORT: number');
  });

  it('should handle array types', async () => {
    process.env.VITE_TAGS = 'tag1,tag2,tag3';
    process.env.VITE_PORTS = '3000,8080,9000';

    const plugin = nodeEnvResolverPlugin({
      server: {},
      client: {
        VITE_TAGS: 'string[]',
        VITE_PORTS: 'number[]',
      }
    }, {
      generateTypes: testTypeFile
    });

    if (plugin.config) {
      // @ts-expect-error - Mocking Vite config for testing
      await plugin.config({}, {});
    }

    if (plugin.configResolved) {
      // @ts-expect-error - Mocking Vite resolved config for testing
      await plugin.configResolved({
        command: 'serve',
        mode: 'development',
        root: process.cwd()
      });
    }

    const content = readFileSync(testTypeFile, 'utf-8');
    expect(content).toContain('readonly VITE_TAGS: string[]');
    expect(content).toContain('readonly VITE_PORTS: number[]');
  });

  it('should only generate types in development mode', async () => {
    process.env.VITE_API_URL = 'https://api.example.com';

    const plugin = nodeEnvResolverPlugin({
      server: {},
      client: {
        VITE_API_URL: url(),
      }
    }, {
      generateTypes: testTypeFile
    });

    if (plugin.config) {
      // @ts-expect-error - Mocking Vite config for testing
      await plugin.config({}, {});
    }

    // Simulate production build
    if (plugin.configResolved) {
      // @ts-expect-error - Mocking Vite resolved config for testing
      await plugin.configResolved({
        command: 'build',
        mode: 'production',
        root: process.cwd()
      });
    }

    // Should NOT generate in production
    expect(existsSync(testTypeFile)).toBe(false);
  });

  it('should handle default values correctly', async () => {
    // Number and boolean defaults don't require env vars
    // String literals are treated as required string fields, not defaults
    
    const plugin = nodeEnvResolverPlugin({
      server: {},
      client: {
        VITE_NUMBER_DEFAULT: 3000,
        VITE_BOOLEAN_DEFAULT: false,
        VITE_OPTIONAL_STRING: string({optional:true}),
      }
    }, {
      generateTypes: testTypeFile
    });

    if (plugin.config) {
      // @ts-expect-error - Mocking Vite config for testing
      await plugin.config({}, {});
    }

    if (plugin.configResolved) {
      // @ts-expect-error - Mocking Vite resolved config for testing
      await plugin.configResolved({
        command: 'serve',
        mode: 'development',
        root: process.cwd()
      });
    }

    const content = readFileSync(testTypeFile, 'utf-8');
    expect(content).toContain('readonly VITE_NUMBER_DEFAULT: number');
    expect(content).toContain('readonly VITE_BOOLEAN_DEFAULT: boolean');
    expect(content).toContain('readonly VITE_OPTIONAL_STRING: string | undefined');
  });
});
